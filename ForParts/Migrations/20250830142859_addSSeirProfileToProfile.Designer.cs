// <auto-generated />
using System;
using ForParts.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForParts.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20250830142859_addSSeirProfileToProfile")]
    partial class addSSeirProfileToProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForParts.Models.Auth.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("phoneNumber")
                        .IsUnique();

                    b.HasIndex("userEmail")
                        .IsUnique()
                        .HasDatabaseName("UQ_Users_Active_Email")
                        .HasFilter("[IsEmailConfirmed] = 1");

                    b.HasIndex("userName")
                        .IsUnique()
                        .HasDatabaseName("UQ_UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ForParts.Models.Budgetes.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("ForParts.Models.Budgetes.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoInsumo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expresion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriePerfil")
                        .HasColumnType("int");

                    b.Property<string>("TipoInsumo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoProducto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("ForParts.Models.Customers.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ForParts.Models.Invoice.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceBranchOfCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceState")
                        .HasColumnType("int");

                    b.Property<decimal>("TipoCambio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ZureoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ForParts.Models.Invoice.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("productId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("ForParts.Models.Product.BudgetedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Heigth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PresupuestoId")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("SerieProfile")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.ToTable("BudgetedProduct");
                });

            modelBuilder.Entity("ForParts.Models.Product.Product", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("StockActual")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("codeProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productCategory")
                        .HasColumnType("int");

                    b.Property<string>("productDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("productPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("productId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ForParts.Models.Product.ProductMovement", b =>
                {
                    b.Property<int>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovementId"));

                    b.Property<string>("CodeProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovementId");

                    b.ToTable("ProductMovements");
                });

            modelBuilder.Entity("ForParts.Models.Product.SupplyNecessary", b =>
                {
                    b.Property<int>("idSupplyNecessary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSupplyNecessary"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyidSupply")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("supplyId")
                        .HasColumnType("int");

                    b.HasKey("idSupplyNecessary");

                    b.HasIndex("SupplyidSupply");

                    b.HasIndex("productId");

                    b.HasIndex("supplyId");

                    b.ToTable("SupplyNecessary");
                });

            modelBuilder.Entity("ForParts.Models.Supply.BudgetedSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetedProductId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutOfStock")
                        .HasColumnType("bit");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeSupply")
                        .HasColumnType("int");

                    b.Property<string>("UnitMeasure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnityPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetedProductId");

                    b.ToTable("BudgetedSupply");
                });

            modelBuilder.Entity("ForParts.Models.Supply.Stock", b =>
                {
                    b.Property<int>("idStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idStock"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.Property<string>("codeSupply")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("stockCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("stockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("stockUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("idStock");

                    b.HasIndex("SupplyId")
                        .IsUnique();

                    b.HasIndex("codeSupply")
                        .IsUnique()
                        .HasDatabaseName("UQ_CodeSupply");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("ForParts.Models.Supply.StockMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeSupply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovementType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("QuantityChange")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("ForParts.Models.Supply.Supply", b =>
                {
                    b.Property<int>("idSupply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSupply"));

                    b.Property<string>("codeSupply")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("descriptionSupply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isEnabledSupply")
                        .HasColumnType("bit");

                    b.Property<string>("nameSupplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameSupply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("priceSupply")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("idSupply");

                    b.HasIndex("codeSupply")
                        .IsUnique()
                        .HasDatabaseName("UQ_CodeSupply");

                    b.ToTable("Supply", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ForParts.Models.Supply.Accessory", b =>
                {
                    b.HasBaseType("ForParts.Models.Supply.Supply");

                    b.Property<string>("descriptionAccessory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Accessory", (string)null);
                });

            modelBuilder.Entity("ForParts.Models.Supply.Glass", b =>
                {
                    b.HasBaseType("ForParts.Models.Supply.Supply");

                    b.Property<decimal>("glassLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("glassThickness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("glassType")
                        .HasColumnType("int");

                    b.Property<decimal>("glassWidth")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Glass", (string)null);
                });

            modelBuilder.Entity("ForParts.Models.Supply.Profile", b =>
                {
                    b.HasBaseType("ForParts.Models.Supply.Supply");

                    b.Property<string>("profileColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("profileHeigth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("profileWeigth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("serirProfile")
                        .HasColumnType("int");

                    b.Property<decimal>("weigthMetro")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("ForParts.Models.Budgetes.Budget", b =>
                {
                    b.HasOne("ForParts.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForParts.Models.Customers.Customer", b =>
                {
                    b.OwnsOne("ForParts.Models.Customers.Direccion", "DireccionFiscal", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CodigoPostal")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Departamento")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("DireccionFiscal")
                        .IsRequired();
                });

            modelBuilder.Entity("ForParts.Models.Invoice.Invoice", b =>
                {
                    b.HasOne("ForParts.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ForParts.Models.Invoice.InvoiceItem", b =>
                {
                    b.HasOne("ForParts.Models.Invoice.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForParts.Models.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ForParts.Models.Product.BudgetedProduct", b =>
                {
                    b.HasOne("ForParts.Models.Budgetes.Budget", null)
                        .WithMany("Products")
                        .HasForeignKey("BudgetId");
                });

            modelBuilder.Entity("ForParts.Models.Product.SupplyNecessary", b =>
                {
                    b.HasOne("ForParts.Models.Supply.Supply", null)
                        .WithMany("ProductoInsumos")
                        .HasForeignKey("SupplyidSupply");

                    b.HasOne("ForParts.Models.Product.Product", "Product")
                        .WithMany("ProductoInsumos")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForParts.Models.Supply.Supply", "supply")
                        .WithMany()
                        .HasForeignKey("supplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("supply");
                });

            modelBuilder.Entity("ForParts.Models.Supply.BudgetedSupply", b =>
                {
                    b.HasOne("ForParts.Models.Product.BudgetedProduct", null)
                        .WithMany("SuppliesUsed")
                        .HasForeignKey("BudgetedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForParts.Models.Supply.Stock", b =>
                {
                    b.HasOne("ForParts.Models.Supply.Supply", "Supply")
                        .WithOne("Stock")
                        .HasForeignKey("ForParts.Models.Supply.Stock", "SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ForParts.Models.Supply.Accessory", b =>
                {
                    b.HasOne("ForParts.Models.Supply.Supply", null)
                        .WithOne()
                        .HasForeignKey("ForParts.Models.Supply.Accessory", "idSupply")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForParts.Models.Supply.Glass", b =>
                {
                    b.HasOne("ForParts.Models.Supply.Supply", null)
                        .WithOne()
                        .HasForeignKey("ForParts.Models.Supply.Glass", "idSupply")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForParts.Models.Supply.Profile", b =>
                {
                    b.HasOne("ForParts.Models.Supply.Supply", null)
                        .WithOne()
                        .HasForeignKey("ForParts.Models.Supply.Profile", "idSupply")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForParts.Models.Budgetes.Budget", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ForParts.Models.Invoice.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ForParts.Models.Product.BudgetedProduct", b =>
                {
                    b.Navigation("SuppliesUsed");
                });

            modelBuilder.Entity("ForParts.Models.Product.Product", b =>
                {
                    b.Navigation("ProductoInsumos");
                });

            modelBuilder.Entity("ForParts.Models.Supply.Supply", b =>
                {
                    b.Navigation("ProductoInsumos");

                    b.Navigation("Stock")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
